# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
import re
import math
import telebot
from telebot import types

# –¢–æ–∫–µ–Ω —Ç–≥ –±–æ—Ç–∞
bot = telebot.TeleBot('7608703327:AAGJLSJClBu67vEThRMOpzCW6QCGteWKPf8')

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
mm = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
button1 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ")
button2 = types.KeyboardButton("–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞")
button3 = types.KeyboardButton("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤")
button4 = types.KeyboardButton("–í–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å")
button5 = types.KeyboardButton("–ê—Ç–æ–º–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
button6 = types.KeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
button7 = types.KeyboardButton("–°—Ç–µ–ø–µ–Ω—å –æ–∫–∏—Å–ª–µ–Ω–∏—è")
button8 = types.KeyboardButton("–ú–æ–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã")
button9 = types.KeyboardButton("–ê—Ç–æ–º–Ω–∞—è –¥–æ–ª—è")
mm.add(button1, button2, button3, button4, button5, button6, button7, button8, button9)


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è –Ø chemistry_bot –∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ö–∏–º–∏–µ–π. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É —Å —Ç–æ–π —Ç–µ–º–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∞ –ø–æ—Ç–æ–º –≤–≤–µ–¥–∏ —Ñ–æ—Ä–º—É–ª—É. –£–¥–∞—á–∏!üçÄ",
                     reply_markup=mm)

@bot.message_handler(commands=['help'])
def help_message(message):
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ - –¥–∞–Ω–Ω—ã–µ –æ –ª—é–±–æ–º —Ö–∏–º–∏—á–µ—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
‚Ä¢ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞ - —Ä–∞—Å—á–µ—Ç –º–∞—Å—Å—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ –ê—Ç–æ–º–Ω–∞—è –¥–æ–ª—è - —Ä–∞—Å—á–µ—Ç –¥–æ–ª–∏ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≤–µ—â–µ—Å—Ç–≤–µ
‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–µ—â–µ—Å—Ç–≤–∞
‚Ä¢ –í–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å - —Ä–∞—Å—á–µ—Ç –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ê—Ç–æ–º–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –ø—Ä–æ—Ç–æ–Ω—ã, –Ω–µ–π—Ç—Ä–æ–Ω—ã, —ç–ª–µ–∫—Ç—Ä–æ–Ω—ã
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤
‚Ä¢ –°—Ç–µ–ø–µ–Ω—å –æ–∫–∏—Å–ª–µ–Ω–∏—è - —Ä–∞—Å—á–µ—Ç –°–û —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ú–æ–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã - –º–æ–ª–∏, –º–∞—Å—Å–∞, –æ–±—ä–µ–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü

"""
    bot.send_message(message.chat.id, help_text, reply_markup=mm)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    try:
        chat_id = message.chat.id
        
        if message.text == "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞":
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ö–∏–º–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É (–ù–∞–ø—Ä–∏–º–µ—Ä: H2O):")
            bot.register_next_step_handler(msg, process_molecular_mass)

        elif message.text == "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ":
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∏–ª–∏ –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: Cl –∏–ª–∏ 17):")
            bot.register_next_step_handler(msg, process_element_info)

        elif message.text == "–í–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å":
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ù–∞–ø—Ä–∏–º–µ—Ä: Mn2O7):")
            bot.register_next_step_handler(msg, process_valence)
        elif message.text == "–ê—Ç–æ–º–Ω–∞—è –¥–æ–ª—è":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ö–∏–º–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É (–ù–∞–ø—Ä–∏–º–µ—Ä: H20):")
            bot.register_next_step_handler(msg, process_atomic_fraction)
        elif message.text == "–ê—Ç–æ–º–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞":
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É (–ù–∞–ø—Ä–∏–º–µ—Ä: F2):")
            bot.register_next_step_handler(msg, process_atomic_structure)

        elif message.text == "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è":
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —ç–ª–µ–º–µ–Ω—Ç–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: Cl):")
            bot.register_next_step_handler(msg, process_electron_config)
            
        elif message.text == "–°—Ç–µ–ø–µ–Ω—å –æ–∫–∏—Å–ª–µ–Ω–∏—è":
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É (–ù–∞—Ä–∏–º–µ—Ä: Fe2O3)")
            bot.register_next_step_handler(msg, process_degree_of_oxidation_full)
        elif message.text == "–ú–æ–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã":
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                           "‚Ä¢ H2O v=5 (–æ–±—ä–µ–º –≤ –ª–∏—Ç—Ä–∞—Ö)\n"
                                           "‚Ä¢ CO2 m=10.5 (–º–∞—Å—Å–∞ –≤ –≥—Ä–∞–º–º–∞—Ö)\n" 
                                           "‚Ä¢ O2 N=3 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü √ó10¬≤¬≥)\n"
                                           "‚Ä¢ NaCl mol=0.5 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ—Å—Ç–≤–∞ –≤ –º–æ–ª—è—Ö)")
            bot.register_next_step_handler(msg, process_molar_calculation)

        elif message.text == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤":
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –≤–µ—â–µ—Å—Ç–≤–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: H2SO4):")
            bot.register_next_step_handler(msg, process_classify_inorganic_substance)
            
        elif message.text == "–ù–∞–∑–∞–¥":
            user_states.pop(chat_id, None)
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=mm)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è —Å—Ç–µ–ø–µ–Ω–∏ –æ–∫–∏—Å–ª–µ–Ω–∏—è
        elif chat_id in user_states and user_states[chat_id].get('action') == 'oxidation_choice':
          msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É (–ù–∞–ø—Ä–∏–º–µ—Ä: Fe2O3):", reply_markup=types.ReplyKeyboardRemove())
          bot.register_next_step_handler(msg, process_degree_of_oxidation_full)
                
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :( {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
def process_element_info(message):
    try:
        result = get_element_info(message.text)
        bot.send_message(message.chat.id, result)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_molecular_mass(message):
    try:
        result = molecular_mass(message.text)
        bot.send_message(message.chat.id, result)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_valence(message):
    try:
        result = calculate_valency(message.text)
        bot.send_message(message.chat.id, result)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_atomic_structure(message):
    try:
        result = atomic_structure(message.text)
        bot.send_message(message.chat.id, result)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_electron_config(message):
    try:
        result = electronic_configur(message.text)
        bot.send_message(message.chat.id, f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {message.text}: {result}")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_degree_of_oxidation_full(message):
    try:
        result = calculate_oxidation_state(message.text)
        bot.send_message(message.chat.id, f"–°—Ç–µ–ø–µ–Ω–∏ –æ–∫–∏—Å–ª–µ–Ω–∏—è –¥–ª—è {message.text}:\n{result}")
        user_states.pop(message.chat.id, None)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def process_molar_calculation(message):
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        input_text = message.text
        formula = None
        params = {}

        # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ
        parts = re.split(r'\s+', input_text)
        for part in parts:
            if '=' in part:
                key, value = part.split('=')
                params[key.strip().lower()] = value.strip()
            else:
                formula = part.strip()

        if not formula:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞")

        result = calculate_moles(formula, **params)
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {formula}:\n{result}")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!")

def process_classify_inorganic_substance(message):
    try:
        result = classify_inorganic_substance(message.text)
        bot.send_message(message.chat.id, f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è {message.text}: {result}")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")


bot.polling(none_stop=True, interval=0)
